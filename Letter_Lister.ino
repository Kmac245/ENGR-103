#include <Adafruit_CircuitPlayground.h>
#include <Wire.h> 
#include <SPI.h>

/////////////////////////////////////////////////////////////////////////
//Word Library Sourced from Talk_US_Male.ino by Peter Knight Copyright 2011.
const uint8_t spSEVEN[]         PROGMEM = {0x0C,0xF8,0x5E,0x4C,0x01,0xBF,0x95,0x7B,0xC0,0x02,0x16,0xB0,0xC0,0xC8,0xBA,0x36,0x4D,0xB7,0x27,0x37,0xBB,0xC5,0x29,0xBA,0x71,0x6D,0xB7,0xB5,0xAB,0xA8,0xCE,0xBD,0xD4,0xDE,0xA6,0xB2,0x5A,0xB1,0x34,0x6A,0x1D,0xA7,0x35,0x37,0xE5,0x5A,0xAE,0x6B,0xEE,0xD2,0xB6,0x26,0x4C,0x37,0xF5,0x4D,0xB9,0x9A,0x34,0x39,0xB7,0xC6,0xE1,0x1E,0x81,0xD8,0xA2,0xEC,0xE6,0xC7,0x7F,0xFE,0xFB,0x7F};
const uint8_t spINCH[]          PROGMEM = {0x23,0x1B,0xD6,0x48,0x2A,0x67,0x9F,0x76,0xC4,0x20,0x89,0xBC,0x7D,0xEB,0x53,0x8F,0x90,0xEC,0x12,0xB7,0x77,0xBB,0xC6,0xEE,0x55,0x92,0x6B,0x72,0x59,0xAA,0x82,0x28,0x4F,0x35,0xE9,0x68,0x0A,0xB9,0xD3,0x6D,0x93,0xA6,0x28,0xC8,0xB1,0xB0,0x85,0x40,0x11,0xCA,0x5D,0x44,0x36,0x00,0x02,0xD6,0xDC,0xD2,0x80,0x05,0x32,0xE0,0x01,0x0F,0x10,0xA0,0x26,0xA1,0xFF,0x07};
const uint8_t spMICRO[]         PROGMEM = {0x22,0x8B,0x44,0xF5,0x92,0x9B,0xDA,0xC5,0xCF,0x6B,0xA8,0xBC,0x2B,0x8B,0xB3,0xDC,0xEE,0xB6,0xA7,0x6E,0x3E,0xB9,0xC2,0x56,0x9F,0xA2,0x57,0x93,0xD0,0x9C,0x5D,0x8A,0x3E,0x88,0x52,0xA6,0x32,0x2B,0xAA,0x15,0x34,0xCB,0xD4,0xC0,0x80,0x12,0x23,0x22,0x60,0x81,0x30,0xC5,0xAA,0x61,0x25,0xF9,0x7A,0xDF,0x87,0x31,0x17,0xDE,0x1E,0xC5,0xFE,0xDB,0x96,0xD5,0xD8,0x38,0xF4,0xAB,0x47,0x78,0xBC,0xAB,0x18,0xE1,0x3C,0xFE,0xF5,0xDF,0xFF,0x03};
const uint8_t spPERCENT[]       PROGMEM = {0x02,0xC8,0xD9,0x5C,0x03,0x2D,0x8A,0xB1,0x30,0x46,0x52,0xAF,0xBA,0x86,0x26,0x1A,0xF6,0x77,0x9B,0xD3,0xD5,0x18,0x68,0x69,0x59,0x63,0xEF,0x80,0x5F,0x5A,0x2D,0x60,0x01,0x0B,0x68,0xC0,0x03,0xAB,0x6E,0xDE,0x25,0x2D,0x17,0xDF,0xFA,0x36,0xBB,0x1D,0x53,0xB1,0x6E,0x23,0x5D,0xA7,0x5D,0x23,0x92,0xB9,0xA7,0x62,0x7F,0x20,0x50,0x84,0x72,0x17,0x91,0x0D,0x00,0xA0,0x80,0xA5,0x33,0x0C,0xF0,0xB3,0x27,0x02,0x5A,0x4A,0xFD,0x7F};
const uint8_t spFOXTROT[]       PROGMEM = {0x08,0x98,0xB1,0x53,0x02,0x1E,0x88,0xC0,0xCA,0x8B,0xDA,0x4A,0x97,0x2E,0xB7,0xBA,0xD5,0x2A,0x73,0xE8,0x48,0xD3,0xCD,0xAD,0xA8,0x35,0xA2,0xC5,0xAA,0x90,0x42,0x84,0x72,0x17,0x91,0x0D,0x0A,0xA8,0xA1,0xC5,0x01,0xAF,0xF8,0x78,0x40,0x01,0x6F,0xB5,0x23,0xA0,0x47,0x53,0x0C,0x44,0xC0,0x03,0xAD,0x49,0x85,0x53,0x53,0xDD,0x8D,0x26,0x56,0xCB,0x70,0xCD,0xB7,0xA6,0x64,0xC7,0x2B,0x39,0xEF,0x5A,0xAA,0xB8,0xF4,0xE2,0x3E,0xF3,0x1C,0x57,0x0E,0x1D,0x69,0xBA,0xD9,0x5F,0x08,0x14,0xA1,0xDC,0x45,0x64,0x03,0x80,0x00,0x8E,0xE0,0x30,0xC0,0xB2,0x53,0x04,0xA8,0xCA,0xE5,0xFF,0x01};
const uint8_t spTEN[]           PROGMEM = {0x0E,0x38,0x3C,0x2D,0x00,0x5F,0xB6,0x19,0x60,0xA8,0x90,0x93,0x36,0x2B,0xE2,0x99,0xB3,0x4E,0xD9,0x7D,0x89,0x85,0x2F,0xBE,0xD5,0xAD,0x4F,0x3F,0x64,0xAB,0xA4,0x3E,0xBA,0xD3,0x59,0x9A,0x2E,0x75,0xD5,0x39,0x6D,0x6B,0x0A,0x2D,0x3C,0xEC,0xE5,0xDD,0x1F,0xFE,0xB0,0xE7,0xFF,0x03};
const uint8_t spRANGE[]         PROGMEM = {0x6C,0xE7,0xA5,0xD9,0x33,0xAD,0xAA,0x4D,0xF7,0xC0,0x6C,0x93,0xEA,0x66,0x3F,0x95,0x3A,0xD5,0x79,0xEB,0x62,0x17,0x69,0x0B,0xE7,0xAB,0x29,0x45,0x8A,0x4B,0xBD,0x9E,0xBA,0x17,0x63,0xB7,0x58,0x7D,0xAB,0x5B,0xAD,0x7A,0x94,0x00,0xAB,0x9C,0xB5,0xBB,0x39,0xCC,0xB9,0xAF,0x75,0x4F,0x7B,0x8F,0x10,0xEE,0x69,0x27,0x9C,0x3D,0x93,0xA4,0x79,0x5C,0x7F,0x87,0xB7,0x7B,0xE6,0x30,0x8B,0xE7,0x5F,0xF3,0x54,0xCD,0x92,0xA1,0x75,0xFC,0xC3,0x80,0x51,0x9C,0x24,0x60,0x01,0x01,0x8C,0xEC,0xF4,0xFF};
const uint8_t spENTER[]         PROGMEM = {0xAB,0x18,0xB6,0x39,0xDC,0x5E,0xDD,0xFA,0x96,0xAB,0xE8,0x41,0x24,0xC9,0x17,0xE5,0x0A,0x0C,0x70,0x4C,0x65,0xE9,0x4A,0x37,0xCC,0xE4,0xDE,0xB3,0x6F,0x73,0xA9,0x0D,0x36,0x9C,0x37,0xEF,0xE9,0xCA,0x35,0xA0,0x5A,0xFA,0x94,0xB7,0xD4,0xC4,0x48,0xC9,0x93,0xBF,0xFF,0x07};
const uint8_t spWEST[]          PROGMEM = {0x66,0xB7,0x7C,0x53,0x53,0x6B,0xFA,0xC5,0xCF,0x65,0x4C,0x64,0x56,0x5C,0x1C,0xAF,0xA6,0xE0,0xEA,0x68,0x52,0x77,0x8A,0x2A,0xD2,0xB3,0x29,0xDF,0xC9,0x9B,0x4A,0xCD,0xE2,0xCD,0x37,0x5F,0x45,0x8B,0x21,0xAD,0xF1,0x78,0xB7,0xBB,0x1F,0x4B,0x89,0x92,0xC6,0x17,0x5B,0x01,0x8F,0x9B,0x1A,0xE0,0x97,0x48,0x0F,0x78,0xC0,0x03,0x1A,0x10,0xC0,0x9F,0xED,0x1C,0xC0,0x00,0x28,0xE0,0x15,0x56,0x05,0x1C,0x9F,0x43,0x80,0x61,0x26,0xFF,0x1F};
const uint8_t spINTRUDER[]      PROGMEM = {0xAB,0x1D,0xA9,0x88,0xCC,0x37,0x9F,0x66,0xBA,0x16,0x31,0xFE,0xBC,0xEB,0x55,0x0F,0xCF,0x98,0x69,0x55,0x47,0xD3,0x0C,0xF2,0xA4,0x45,0xAB,0x6D,0x6D,0x43,0x57,0x34,0xF8,0x78,0x34,0x45,0xA0,0x08,0xE5,0x2E,0x22,0x1B,0x14,0xD0,0x4A,0x46,0x06,0x34,0xD0,0xD2,0xEC,0x39,0xCC,0xCC,0xDD,0xCC,0x56,0x9E,0x95,0x58,0x14,0xB5,0xDB,0x45,0xAB,0xAB,0x27,0x4B,0xF6,0x74,0xA2,0x62,0xCE,0xB2,0x3C,0x66,0xB7,0x7A,0x2C,0x0B,0x61,0x95,0xBB,0x96,0x96,0x4C,0xD9,0x35,0xDB,0x98,0xAB,0x29,0xA2,0xB3,0x7C,0x73,0xED,0x47,0xBB,0x4A,0x2E,0xD0,0x71,0x3F,0xF9,0x8B,0x5F,0xF8,0x4A,0x0F,0xF4,0xD1,0x3C,0xFF,0x0F};
////////////////////////////////////////////////////////////////////////

volatile int wordLister = 0; //What word will I play

volatile int time = 0; //Start time at 0 sec

int score; //Score value
int letterVal; //Letter value
int buttonVal; //Button input value
int capVal; //capacitance value

int j; //Variable LED pin number

void R_buttonISR () { //Right Button Interrupt
delay(5);
buttonVal++;
j++;
}

void L_buttonISR () { // Left Button Interrupt
delay(5);
buttonVal--;
j--;
}

void setup() {
  CircuitPlayground.begin();
  Serial.begin(9600);

  pinMode(5, INPUT_PULLDOWN);

//Interrupt Functions
  attachInterrupt(digitalPinToInterrupt(5), R_buttonISR, RISING);
  attachInterrupt(digitalPinToInterrupt(4), L_buttonISR, RISING);
  

  score = 0; //Set score to zero at start of game
}

void loop() {

capVal = CircuitPlayground.readCap(6); //Detect capacitance value

if (time < 1) {
int wordLister = random(0, 9); //Choose random switch case

switch(wordLister) 
  { //Switch case funtion for words
    case 0:
      {CircuitPlayground.speaker.say(spSEVEN);
      letterVal = 5;}
      break;
    case 1:
      {CircuitPlayground.speaker.say(spMICRO);
      letterVal = 5;}
      break;
    case 2:
      {CircuitPlayground.speaker.say(spINCH);
      letterVal = 4;}
      break;
    case 3:
      {CircuitPlayground.speaker.say(spPERCENT);
      letterVal = 7;}
      break;
    case 4:
      {CircuitPlayground.speaker.say(spFOXTROT);
      letterVal = 6;}
      break;
    case 5:
      {CircuitPlayground.speaker.say(spTEN);
      letterVal = 3;}
      break;
    case 6:
      {CircuitPlayground.speaker.say(spRANGE);
      letterVal = 5;}
      break;
    case 7:
      {CircuitPlayground.speaker.say(spENTER);
      letterVal = 5;}
      break;
    case 8:
      {CircuitPlayground.speaker.say(spWEST);
      letterVal = 4;}
      break;
    case 9:
      {CircuitPlayground.speaker.say(spINTRUDER);
      letterVal = 8;}
      break;
    default:
	  CircuitPlayground.speaker.end();
  }
} 
else 
{
CircuitPlayground.speaker.end();
}

Serial.print("Button:");
Serial.println(buttonVal);

Serial.print("Letter:");
Serial.println(letterVal);

//Serial.print("Cap:");
// Serial.println(capVal);

// Serial.println(" ");
if (letterVal != 0 || letterVal != 9) {
CircuitPlayground.setPixelColor(j, 255, 255, 255);
}

/////////////////////////////////////////////////////////////////////////////////

if (score<3) { //Begin First Level

Serial.println("Level 1");

Serial.println(time);

if (time == 10)
  {
    //delay_8s.repeat();
    if (capVal > 900 && buttonVal == letterVal) //Check if answer is submitted and correct
    {
      score++; //Add to your score
      Serial.print("Score:");
      Serial.println(score);
        if (score == 1)
        {
          CircuitPlayground.setPixelColor(9, 0, 0, 255); //Set neopixel 9 blue
        } else if (score == 2)
        {
          CircuitPlayground.setPixelColor(0, 0, 0, 255); //Set neopixel 0 blue
        }
      delay(2000);
      time = 0;
      buttonVal = 0;
      j = 0;
      CircuitPlayground.clearPixels();
    }
    else 
    {
    if (score != 3) {
    Serial.println("You Lose :("); 
    for (int i=0; i<10; i++) { //All neopixels red
      CircuitPlayground.setPixelColor(i, 255, 0, 0);
      delay(50);
      CircuitPlayground.clearPixels();
    }
    int score = 0; //Reset score to zero
    delay(2000);
    time = 0;
    buttonVal = 0;
    j = 0;
    CircuitPlayground.clearPixels();
    }
    }
  }
  else
  {
    time++;
    delay(1000);
  } 
}
/////////////////////////////////////////////////////////////////////////////////

if (score >3 && score <7) { //Begin Second Level
Serial.println("Level 2");

Serial.println(time);

if (time == 8)
  {
    //delay_8s.repeat();
    if (capVal > 900 && buttonVal == letterVal) //Check if answer is submitted and correct
    {
      score++; //Add to your score
      Serial.print("Score:");
      Serial.println(score);
        if (score == 5)
        {
          CircuitPlayground.setPixelColor(9, 255, 0, 0); //Set neopixel 9 red
        } else if (score == 6)
        {
          CircuitPlayground.setPixelColor(0, 255, 0, 0); //Set neopixel 0 red
        }
      delay(2000);
      time = 0;
      buttonVal = 0;
      j = 0;
      CircuitPlayground.clearPixels();
    }
    else 
    {
    if (score != 7) {
    Serial.println("You Lose :("); 
    for (int i=0; i<10; i++) { //All neopixels Red
      CircuitPlayground.setPixelColor(i, 255, 0, 0);
      delay(50);
      CircuitPlayground.clearPixels();
    }
    score = 0; //Reset score to zero
    delay(2000);
    time = 0;
    buttonVal = 0;
    j = 0;
    CircuitPlayground.clearPixels();
    }
    }
  }
  else
  {
    time++;
    delay(1000);
  } 
}
/////////////////////////////////////////////////////////////////////////////////

if (score >7 && score <10) { //Begin Third and Final Level

Serial.println("Level 3");

Serial.println(time);

if (time == 6)
  {
    if (capVal > 900 && buttonVal == letterVal) //Check if answer is submitted and correct
    {
      score++; //Add to your score
      Serial.print("Score:");
      Serial.println(score);
        if (score == 8)
        {
          CircuitPlayground.setPixelColor(9, 255, 0, 255); //Set neopixel 9 purple
        } else if (score == 9)
        {
          CircuitPlayground.setPixelColor(0, 255, 0, 255); //Set neopixel 0 purple
        }
      delay(2000);
      time = 0;
      buttonVal = 0;
      j = 0;
      CircuitPlayground.clearPixels();
    }
    else 
    {
    Serial.println("You Lose :("); 
    for (int i=0; i<10; i++) { //All neopixels red
      CircuitPlayground.setPixelColor(i, 255, 0, 0); //All neopixels green
      delay(50);
      CircuitPlayground.clearPixels();
    }
    score = 0; //Reset score to zero
    delay(2000);
    time = 0;
    buttonVal = 0;
    j = 0;
    CircuitPlayground.clearPixels();
    }
  }
  else
  {
    time++;
    delay(1000);
  } 
}
/////////////////////////////////////////////////////////////////////////////////
if(score == 3 || score == 7){ //To get around errors with < > thresholds, This adds a point to score so the game operates smoothly
  score++;
  CircuitPlayground.clearPixels();
  delay(200);
  CircuitPlayground.setPixelColor(0, 255, 255, 255); //Flash neopixel 0 and 9 white
  CircuitPlayground.setPixelColor(9, 255, 255, 255); //Flash neopixel 0 and 9 white
  delay(200);
  CircuitPlayground.clearPixels();
  delay(200);
  CircuitPlayground.setPixelColor(0, 255, 255, 255); //Flash neopixel 0 and 9 white
  CircuitPlayground.setPixelColor(9, 255, 255, 255); //Flash neopixel 0 and 9 white
  delay(200);
  CircuitPlayground.clearPixels();
}


if(score == 10){ //Win!
  Serial.println("You Win! :)");
for (int i=0; i<10; i++) {
  CircuitPlayground.setPixelColor(i, 0, 255, 0); //All neopixels green
  delay(50);
  CircuitPlayground.clearPixels();
}
delay(10000);
}

}

